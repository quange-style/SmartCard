#include "Api.h"
#include "Publics.h"
#include "ParamMgr.h"
#include "../link/linker.h"
#include "Errors.h"
#include "TicketUl.h"
#include "TicketSvt.h"
#include "Records.h"
#include <string.h>
#include "../link/myprintf.h"
#include "../link/SerialFile.h"
#include "../ble/ble.h"

uint8_t Api::current_device_type	= 0;
uint16_t Api::current_device_id		= 0;
uint16_t Api::current_station_id	= 0;
uint16_t Api::current_city_id	    = 0;
uint8_t Api::bLocalInstitutionCode[8] = {0};			    // 受理机构代码
uint8_t Api::door_type				= 3;
uint8_t Api::locked_entry_id[7]		= {0};
uint8_t Api::locked_exit_id[7]		= {0};
uint8_t	Api::qr_readbuf[512]  = {0};
int Api::qr_readbuf_len				= 0;
uint8_t	Api::clear_qr_readbuf[512]  = {0};
uint8_t	Api::get_package_time[7]  = {0};
//uint8_t	Api::last_qr_readbuf[512]  = {0};
uint8_t	Api::qr_passcode[32+1]  = {0};
uint8_t Api::antFlag = 0;
uint16_t Api::ble_count = 0;
int Api::search_card_err = 0;
TRADELAST Api::m_tdLast				= {{0}, {0}, 0, {0}, 0};
long Api::m_sam_seq_charge			= 0;			// SAM流水，充值时使用
long Api::m_trade_val				= 0;			// 充值金额，充值时使用
int Api::sysFlag = 0;//奇数是苹果,偶数是安卓

uint8_t	Api::testTmpData[14+1]  = {0};

uint8_t	Api::ble_conFlag[4]  = {0xD0,0x07,0x00,0x00};
//uint8_t	Api::ble_conFlag[4]  = {0x80,0x0C,0x00,0x00};
//uint8_t	Api::ble_conFlag[4]  = {0x58,0x02,0x00,0x00};
uint8_t	Api::ble_conFlag2[4]  = {0x00,0x00,0x00,0x00};
uint8_t	Api::ble_closeFlag[4]  = {0x3E,0x00,0x00,0x00};
uint8_t Api::ble_subscriberHandle = 0x00;

char Api::m_sam[8][17] = {{0}};
char Api::m_tml[8][13] = {{0}};

#define API_FILE_VERSION        "2019123001"

CLoopList	g_LoopList;

Api::Api(void)
{

	for (uint8_t i=0;i<sizeof(m_sam)/sizeof(m_sam[0]);i++)
	{
		memset(m_sam[i], '0', sizeof(m_sam[i] - 1));
		memset(m_tml[i], '0', sizeof(m_tml[i] - 1));
	}
}

Api::~Api(void)
{
}

uint16_t Api::organize_data_region(uint8_t * p_data, PRETINFO p_ret, uint16_t len_region1, void * p_region1, uint16_t len_region2, void * p_region2)
{
    uint16_t pos = 0;

    memcpy(p_data + pos, p_ret, sizeof(RETINFO));
    pos += sizeof(RETINFO);

    memcpy(p_data + pos, &len_region1, sizeof(len_region1));
    pos += sizeof(len_region1);

    memcpy(p_data + pos, p_region1, len_region1);
    pos += len_region1;

    memcpy(p_data + pos, &len_region2, sizeof(len_region2));
    pos += sizeof(len_region1);

    memcpy(p_data + pos, p_region2, len_region2);
    pos += len_region2;

	memcpy(&m_tdLast.ret, p_ret, sizeof(RETINFO));
	m_tdLast.len_region1 = len_region1;
	memcpy(m_tdLast.region1, p_region1, len_region1);
	m_tdLast.len_region2 = len_region2;
	memcpy(m_tdLast.region2, p_region2, len_region2);

    return pos;
}

uint16_t Api::api_match_device(ETPDVC dvc_type_support)
{
    if (dvc_type_support != current_device_type)
        return ERR_DEVICE_SUPPROT;
    return 0;
}

void Api::get_current_device_info(char * p_station, char * p_dev_type, char * p_dev_id)
{
	char dev_info[16] = {0};
	sprintf(dev_info, "%04x%02x%03x", Api::current_station_id, Api::current_device_type, Api::current_device_id);
	memcpy(p_station, dev_info, 4);
	memcpy(p_dev_type, dev_info + 4, 2);
	memcpy(p_dev_id, dev_info + 6, 3);
}

void Api::api_calling(uint8_t api_addr, uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data, bool& valid_app_addr)
{
    static API_FUNC_LIST fun_list[] =
    {
        {0,		Common_Initialize_Device},
		{1,		Common_GetVersion},
        {2,		Common_GetSamInfo},
        {3,		Common_SetDegradeMode},
        {4,		GetFare},
		{5,		Common_GetParamInfo},
		{6,		Get_Reg_Value},
		{7,		Get_Reg_Inf},
		{8,		Reset_Reg_Inf},
		{9,		Common_LastTrade},
		{10,	Common_TimeSynchronization},
		{11,	Common_GetReaderTime},

        {13,	Gate_AisleModel},
        {14,	Gate_EntryFlow},
        {15,	Gate_ExitFlow},

        {20,	Tvm_Ticket_Sale},
        {21,	Tvm_SjtClear},
        {22,	Tvm_TicketAnalyze},
        {23,	Tvm_PurseDecrease},
		{24,	Tvm_SvtIncrease1},
		{25,	Tvm_SvtIncrease2},
		{26,    Tvm_GetTopPrice},
		{27,    Tvm_IGetTicket},
		{28,    Tvm_GetTicketInfo},
		//{29,    Tvm_GetEticketRecord},
		{29,	Tvm_GetETicket_Sale},
		{67,	Tvm_ThirdPay_Sale},
		{68,	Tvm_ThirdPayGetETicket},
		{69,	Tvm_UploadGetTicketInfo},

        {30,	Bom_Login},
        {31,	Bom_TicketAnalyze},
        {32,	Bom_GetTicketInfo},
        {33,	Bom_Ticket_Sale},
		{35,	Bom_TransactConfirm},
		{36,	Bom_ExitSale},
		{37,	Bom_TicketUpdate},
        {38,	Bom_PurseDecrease},
		{39,	Bom_DirectRefund},
        {40,	Bom_TicketDeffer},
		{41,	Bom_TicketUnLock},
		{42,	Bom_SvtIncrease1},
		{43,	Bom_SvtIncrease2},
		{44,	Bom_FunActive1},
		{45,	Bom_FunActive2},
		{46,	Bom_Charge_Descind1},
		{47,	Bom_Charge_Descind2},
		{48,	Bom_Query_Policy_Penalty},
		{49,	Bom_Query_OverTrip_Val},

        {50,	Tcm_GetTicketInfo},

		{51,	Bom_EticketUpdate},

		/*
		{51,	Es_Ticket_Analyse},
		{52,	Es_Ticket_Init},
		{53,	Es_Ticket_Evaluate},
		{54,	Es_Ticket_Destroy},
		{55,	Es_Ticket_Recode},
		{56,	Es_Ticket_Private},
		{57,	Es_Ticket_Clear},*/

		{253,	Get_Configurations},
		{254,	Set_Configurations},
		{255,	Temp_interface_1}
    };

    for (uint16_t i=0; i<sizeof(fun_list)/sizeof(fun_list[0]); i++)
    {
        if (api_addr == fun_list[i].addr_api)
        {
        
			HS_LOG("search addr  i=%d  \n",i);
            fun_list[i].api_fun_ptr(param_stack, data_to_send, len_data);
			valid_app_addr = true;
            return;
        }
    }

	// 不存在的
	valid_app_addr = false;
}

char * Api::sock_sam_id(int sock_id_from1)
{
    return (char *)m_sam[sock_id_from1];
}

char * Api::sock_terminal_id(int sock_id_from1)
{
	return (char *)m_tml[sock_id_from1];
}

void Api::Common_Initialize_Device(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
    RETINFO ret				= {0};
	uint8_t sam_status[8]	= {0xFF};
	int i = 0;

	do
    {
		////////////////////////
		///////默认城市代码/////
		////////////////////////
		param_stack[5] = 0x55;
		param_stack[6] = 0x10;

		////////////////////////
		///////默认机构代码/////
		////////////////////////
		//memcpy(bLocalInstitutionCode,"\x02\x19\x55\x10\x00\x00\x00\x02",8);
		memcpy(bLocalInstitutionCode,"\x02\x19\x55\x10\xFF\xFF\xFF\xFF",8);

		memset(locked_entry_id, 0, sizeof(locked_entry_id));
		memset(locked_exit_id, 0, sizeof(locked_exit_id));

        current_station_id = (uint16_t)((param_stack[0] << 8) + param_stack[1]);
        current_device_type = param_stack[2];
        current_device_id = (uint16_t)((param_stack[3] << 8) + param_stack[4]);
		current_city_id = (uint16_t)((param_stack[5] << 8) + param_stack[6]);

		//current_device_type=0x09;
		HS_LOG("station_id =%d  device_type=%d  device_id=%d city_id=%d \n"
			,current_station_id,current_device_type,current_device_id,current_city_id);
		//memcpy(bLocalInstitutionCode,&param_stack[7],8);

		//首先清掉二维码数据//
		memset(Api::qr_readbuf,0x00,sizeof(Api::qr_readbuf));//交易结束，不管是否成功，再次清掉二维码

		//dbg_formatvar("current_station_id=%04X",current_station_id);
		//dbg_formatvar("current_device_type:%02X",current_device_type);
		//dbg_formatvar("current_device_id:%03X",current_device_id);
		//dbg_formatvar("current_city_id:%04X",current_city_id);
		//dbg_dumpmemory("bLocalInstitutionCode:",bLocalInstitutionCode,8);

		memcpy(operator_id, "000000", 6);
		bom_shift_id = 0;
		work_area = 1;
		door_type = 3;


		if (current_device_type != 0x09)
		{
			ret.wErrCode = g_Parameter.load_all_prms();
			HS_LOG("wErrCode =%d\n",ret.wErrCode);
			if (ret.wErrCode != 0)	break;

			ret.wErrCode = g_Parameter.device_registed(current_station_id, current_device_type, current_device_id);
			HS_LOG("wErrCode =%d\n",ret.wErrCode);
			if (ret.wErrCode != 0)	break;

			TicketBase::load_confirm_from_file();
		}


		memset(sam_status, 0xFF, sizeof(sam_status));

		
		HS_LOG("sam_init prms sam1 \n" );
        if (sam_init(SAM_SOCK_1, m_sam[SAM_SOCK_1], m_tml[SAM_SOCK_1]) == 0)
		{
			if (g_Parameter.sam_counterpart(SAM_SOCK_1, m_sam[SAM_SOCK_1], param_stack, param_stack[2], param_stack + 3, true))
				sam_status[SAM_SOCK_1] = 0x00;
			else
				sam_status[SAM_SOCK_1] = 0x01;
		}

		HS_LOG("sam_init prms sam2 \n" );
		if (sam_init(SAM_SOCK_2, m_sam[SAM_SOCK_2], m_tml[SAM_SOCK_2]) == 0)
		{
			if (g_Parameter.sam_counterpart(SAM_SOCK_2, m_sam[SAM_SOCK_2], param_stack, param_stack[2], param_stack + 3, true))
				sam_status[SAM_SOCK_2] = 0x00;
			else
				sam_status[SAM_SOCK_2] = 0x01;
		}

		HS_LOG("sam_init prms sam3 \n" );
		if (sam_init(SAM_SOCK_3, m_sam[SAM_SOCK_3], m_tml[SAM_SOCK_3]) == 0)
		{
			if (g_Parameter.sam_counterpart(SAM_SOCK_3, m_sam[SAM_SOCK_3], param_stack, param_stack[2], param_stack + 3, true))
				sam_status[SAM_SOCK_3] = 0x00;
			else
				sam_status[SAM_SOCK_3] = 0x01;
		}

		HS_LOG("sam_init prms sam4 \n" );
		if (sam_init(SAM_SOCK_4, m_sam[SAM_SOCK_4], m_tml[SAM_SOCK_4]) == 0)
		{
			if (g_Parameter.sam_counterpart(SAM_SOCK_4, m_sam[SAM_SOCK_4], param_stack, param_stack[2], param_stack + 3, true))
				sam_status[SAM_SOCK_4] = 0x00;
			else
				sam_status[SAM_SOCK_4] = 0x01;
		}

		g_Parameter.device_initialize();
		g_Record.delete_file_overdue();
		g_Parameter.delete_prm_outof_config();

		ubeep(50);

		uint8_t sendData[256] = {0};
		ble::ble_get_version(sendData);

		/*
		//测试蓝牙远程更新
		//1.首先复位
		ble::ble_reset(1);
		//2.设置波特率为9600
		ble::ble_set_baud(9600);
		//usleep(50 * 1000);
		//3.发送数据33
		uint8_t sendData[256] = {0};
		int length = 0;

		length = 3;
		memcpy(sendData,"\x33\x33\x33",length);
		ble::ble_send_test(sendData,1,length);

		//切换波特率为115200
		length = 11;
		memcpy(sendData,"\x71\x34\x04\x00\x00\x2C\x08\x00\x00\xAA\x59",length);
		ble::ble_send_test(sendData,1,length);

		//设置波特率为115200
		ble::ble_set_baud(115200);

		//切换波特率为115200
		length = 11;
		memcpy(sendData,"\x71\x34\x04\x00\x00\x2C\x08\x00\x00\xAA\x59",length);
		ble::ble_send_test(sendData,1,length);

		length = 7;
		memcpy(sendData,"\x71\x36\x00\x00\x00\x70\x0B",length);
		ble::ble_send_test(sendData,1,length);

		length = 7;
		memcpy(sendData,"\x71\x37\x00\x00\x00\xC4\x7D",length);
		ble::ble_send_test(sendData,1,length);

		length = 7;
		memcpy(sendData,"\x71\x38\x00\x00\x00\x2A\xA9",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x39\x04\x00\x00\x01\x00\x00\x00\xA7\xA8",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x3B\x04\x00\x00\x00\x10\x00\x00\xD6\x12",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x42\x04\x00\x00\x0F\x00\x00\x00\x5E\x6C",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x4B\x04\x00\x00\x5E\x23\x00\x00\x4E\xE9",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x35\x04\x00\x00\x00\x12\x7A\x00\x35\x05",length);
		ble::ble_send_test(sendData,1,length);

		length = 14;
		memcpy(sendData,"\x71\x3A\x08\x00\x00\x05\x06\x20\x52\x60\xB9\xAB\x01\x07\x83",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x4C\x04\x00\x00\x00\x00\x00\x10\x90\x34",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x4D\x04\x00\x00\xD4\x00\x00\x10\xB1\x11",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x3C\x04\x00\x00\xB0\x46\x00\x00\x71\xC8",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x3E\x04\x00\x00\x57\x6F\x00\x00\x47\x8A",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x40\x04\x00\x00\x00\x11\x00\x00\x45\x43",length);
		ble::ble_send_test(sendData,1,length);

		length = 11;
		memcpy(sendData,"\x71\x3B\x04\x00\x00\x00\x11\x00\x00\xE6\x25",length);
		ble::ble_send_test(sendData,1,length);
		///////////////////////////////////////////////////////////////////////
		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x38\x5C\x00\x10\xD5\x00\x00\x10\xE3\x00\x00\x10\xE5\x00\x00\x10\xE7\x00\x00\x10\xE9\x00\x00\x10\xEB\x00\x00\x10\x01\x00\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xED\x00\x00\x10\xEF\x00\x00\x10\x00\x00\x00\x00\xF1\x00\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xC1\x00\x00\x10\xF0\xB5\x84\x46\x87\xB2\x94\xB2\x3D\x46\x85\xB0\xA6\x46\x67\x43\x00\x24\x01\x94\x0C\x04\x00\x0C\x20\x43\x74\x46\x02\x90\x80\xB2\x00\x90\x60\x43\x00\x26\x36\x04\x04\x0C\x26\x43\x01\x9C\x00\x04\xC0\x19\x8F\xB2\x66\x41\x74",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x9D\x41\x04\xD3\x15\x0E\x1B\x02\x2B\x43\x12\x02\x08\x34\x65\x46\x76\x46\x2F\x07\x36\x09\x3E\x43\x2D\x09\xB6\x1A\x9D\x41\x04\xD3\x15\x0F\x1B\x01\x2B\x43\x12\x01\x24\x1D\x65\x46\x76\x46\xAF\x07\xB6\x08\x3E\x43\xAD\x08\xB6\x1A\x9D\x41\x04",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x9B\x07\x03\xD0\x09\xE0\x08\xC9\x12\x1F\x08\xC0\x04\x2A\xFA\xD2\x03\xE0\x0B\x78\x03\x70\x40\x1C\x49\x1C\x52\x1E\xF9\xD2\x70\x47\xD2\xB2\x01\xE0\x02\x70\x40\x1C\x49\x1E\xFB\xD2\x70\x47\x00\x22\xF6\xE7\x10\xB5\x13\x46\x0A\x46\x04\x46\x19",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x5A\x52\x21\x04\x12\x0C\x0A\x43\x24\x0C\x40\x1C\x08\x28\xDF\xDB\x01\x98\x02\x90\x00\x99\x70\x46\x01\x91\x00\x90\x05\x9B\x04\x9A\x07\x99\x06\x98\x00\xF0\x47\xF8\xD0\xE7\x00\x00\x0D\xFC\xFF\xFF\x0E\xB5\xC2\x17\xC1\x0F\x50\x40\xCA\x07\x40",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x05\x46\x0E\x46\x00\x9A\x05\x99\x04\x98\x00\xF0\x39\xF8\x08\x43\x05\xD0\x01\x20\x04\xE0\x20\x46\x39\x46\x07\xB0\xF0\xBD\x00\x20\xC1\x17\x05\x43\x0E\x43\x2C\x43\x37\x43\x00\x99\x0E\x98\x63\x05\x40\x1A\x79\x05\xE4\x0A\x00\x22\x0C\x43\xFD",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x92\x1C\x03\xE0\x1D\x78\x0D\x70\x49\x1C\x5B\x1C\x52\x1E\xF9\xD5\xA1\x42\xD8\xD3\x00\x20\x70\xBD\x00\xBF\x00\x68\x70\x47\x00\x00\x00\xBF\x01\x60\x70\x47\x00\x00\x00\xBF\x03\x68\x8B\x43\x0A\x40\x13\x43\x03\x60\x70\x47\x00\x00\xF8\xB5\x0F",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x30\x46\xFF\xF7\x8D\xFF\x0B\x48\x32\x30\x80\x47\x01\xF0\x98\xFB\xA0\x06\xBD\xD5\x20\x21\x30\x46\xFF\xF7\x82\xFF\xB8\xE7\x70\xBD\x10\x00\x00\x2F\xB1\x85\x00\x01\x00\x99\x9A\x00\x00\xFF\xFF\x00\xE7\x72\x00\x01\x21\x52\x01\x01\x38\xB5\x2C",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x0B\x4C\x20\x46\xFF\xF7\x08\xFF\xC1\x07\x09\xD0\x01\x21\x20\x46\xFF\xF7\x06\xFF\x07\x48\x00\x68\x00\x28\x00\xD0\x80\x47\x10\xBD\x80\x07\xFC\xD5\x02\x21\x20\x46\xFF\xF7\xFA\xFE\x10\xBD\x00\x00\x10\x90\x00\x40\xBC\x46\x00\x10\xF7\xB5\x10",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x1C\x4D\x00\x10\x66\x46\x00\x10\xC1\x06\xC9\x0E\x01\x20\x88\x40\x01\x49\x08\x60\x70\x47\x00\x00\x00\xE1\x00\xE0\x10\xB5\x0A\x4C\x60\x68\xC0\x07\x09\xD0\x62\x68\x01\x20\x08\x49\x80\x07\x03\xF0\x6E\xF8\x60\x68\x40\x08\x40\x00\x60\x60\x05",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x20\x46\x03\xF0\x27\xF8\x20\x46\x03\xF0\x5A\xF8\x20\x46\x03\xF0\x3D\xF8\x20\x46\x03\xF0\xD2\xF8\x29\x4D\x21\x46\x28\x46\x03\xF0\xE3\xF8\x21\x46\x27\x48\x03\xF0\xDF\xF8\x01\x21\xC9\x05\x00\x22\x25\x48\xFF\xF7\xF9\xFD\x24\x48\x21\x05\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x03\xF0\x36\xFB\x60\x07\x03\xD5\x04\x21\x30\x46\x03\xF0\x30\xFB\x68\x68\x00\x28\x00\xD0\x80\x47\x70\xBD\x00\x00\x00\x20\x00\x40\x9C\x46\x00\x10\x70\xB5\x11\x4D\x28\x46\x03\xF0\x26\xFB\x04\x46\xC0\x07\x03\xD0\x01\x21\x28\x46\x03\xF0\x1A",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x60\x68\x00\x28\x00\xD0\x80\x47\x70\xBD\x00\x00\x00\x50\x00\x40\xB4\x46\x00\x10\x70\xB5\x18\x4C\x60\x78\x00\x28\x04\xD0\x02\x28\x05\xD2\x00\xF0\xBF\xFA\x13\xE0\xFF\xF7\xC2\xFE\x10\xE0\x05\x28\x0E\xD2\x00\x20\x00\xF0\x0C\xFD\x10\x4D\xA8",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x04\xE0\x8B\x70\xCA\x70\x04\x49\x05\x4B\x10\x31\x03\xF0\x94\xFA\x70\xBD\x00\x00\x3C\x46\x00\x10\x0C\x4C\x00\x10\x00\x70\x00\x40\x97\x41\x00\x10\x70\xB5\x09\x4C\x05\x46\x20\x46\x03\xF0\xB8\xFA\x80\x07\xFA\xD5\x29\x46\x20\x46\x03\xF0\xB7",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x25\x78\x64\x1C\xAB\x42\x00\xD2\x1D\x46\x63\x5D\x5B\x00\xE3\x18\x30\xBC\x18\x47\xF8\xB5\x15\x46\x0E\x46\x07\x46\x01\xF0\x12\xFA\x04\x00\x02\xD0\x00\x20\x02\xF0\x0D\xFB\x06\x4B\x2A\x46\x31\x46\x38\x46\x98\x47\x05\x46\x00\x2C\x01\xD0\x02",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x98\x47\x2A\x46\x68\x46\x04\x99\xFF\xF7\xF8\xF9\xF0\x6B\x05\x4B\x00\x19\x04\x22\x69\x46\x26\x33\x98\x47\x05\xB0\xF0\xBD\x00\x00\x80\xD0\x00\x10\xCF\x11\x00\x01\x02\xE0\x08\xC8\x12\x1F\x08\xC1\x00\x2A\xFA\xD1\x70\x47\x70\x47\x00\x20\x01",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x10\xBD\x00\x00\x10\xB5\x02\x23\x15\x22\x07\x4C\x0C\x21\x05\x48\xA0\x47\x00\x21\x01\x70\x01\x21\x41\x70\x03\x49\x2E\x31\x88\x47\x10\xBD\x00\x00\x0D\x30\x00\x00\x5D\x33\x00\x01\x70\xB5\x0C\x46\x05\x46\x02\x21\x04\x4A\x15\x20\x90\x47\x21",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x06\xAA\x0A\x30\x00\xF0\x06\xFB\x68\x46\x00\x8B\xC0\x07\x15\xD0\x68\x46\x40\x8F\x0D\x49\x88\x42\x10\xD1\x06\xA9\x10\x22\x03\x31\x68\x46\xFF\xF7\xEB\xF8\x06\x22\xE9\x1C\x04\xA8\xFF\xF7\xE6\xF8\xA8\x78\x69\x46\x88\x75\x17\x98\x00\xF0\x8A",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x04\x49\xA0\x82\x20\x46\x2E\x31\x88\x47\x05\xB0\xF0\xBD\x00\x00\x06\x30\x00\x00\x5D\x33\x00\x01\x70\xB5\x0C\x46\x05\x46\x10\x49\x15\x20\x88\x47\x03\x28\x08\xD0\x00\x20\x00\xF0\xF9\xFA\x02\xF0\x55\xFA\x20\x78\x00\x28\x07\xD0\x0B\xE0\x09",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x21\x46\x28\x46\x00\xF0\xA4\xFA\x00\x20\x70\xBD\x89\x2D\x00\x01\x70\xB5\x05\x46\x0C\x46\x01\x20\x00\xF0\x54\xF8\x21\x46\x28\x46\x00\xF0\x96\xFA\x00\x20\x70\xBD\x15\x22\x03\x4B\x0C\x21\x01\x48\x18\x47\x00\x00\x11\x30\x00\x00\xD7\x33\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x21\x46\x28\x46\x00\xF0\x24\xFA\x00\x20\x70\xBD\x89\x2D\x00\x01\x00\x20\x70\x47\x00\x20\x70\x47\x08\x78\x00\x28\x04\xD1\x0F\x20\x40\x1E\x40\xB2\x00\x28\xFB\xDA\x00\x20\x70\x47\x49\x78\x00\x29\x05\xD0\x00\x20\x01\xE0\x40\x1C\xC0\xB2\x81",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x02\x4E\x00\x10\xFE\xE7\xFF\xFF\x10\xB5\x4B\x78\x00\x2B\x07\xD0\x00\x22\x01\xE0\x52\x1C\xD2\xB2\x93\x42\xFB\xD8\x00\xF0\x98\xF9\x00\x20\x10\xBD\x0A\x78\x00\x2A\x07\xD0\x48\x78\x02\x28\x06\xD0\x0F\x20\x40\x1E\x40\xB2\x00\x28\xFB\xDA\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x10\xB5\x00\xF0\x25\xF9\x00\x20\x10\xBD\x00\x00\x70\xB5\x0B\x46\x02\x46\xFF\x20\x0D\x49\x00\x24\x6A\x25\x65\x43\x6D\x18\xFF\x35\x01\x35\xED\x8F\x95\x42\x0B\xD1\x00\x2B\x07\xD0\x6A\x20\x60\x43\x41\x18\x06\x22\x18\x46\xDB\x31\xFE\xF7\x60",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x03\x4A\x15\x20\x90\x47\x70\xBD\x02\x4E\x00\x10\xFF\xFF\x00\x00\x61\x2D\x00\x01\xF8\xB5\x47\x18\x05\x46\x14\x46\x3E\x21\x10\x46\xFE\xF7\x05\xFE\x33\xE0\x2E\x78\x69\x1C\x88\x19\x00\x90\xB8\x42\x01\xD9\x00\x20\xF8\xBD\x08\x78\x02\x28\x10",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x11\x54\x91\x1E\x0E\x52\x34\x21\xD8\x30\xFE\xF7\x90\xFD\xA0\x7D\x40\x1E\xA0\x75\xFE\xBD\x00\x00\xFF\xFF\x00\x00\x02\x4E\x00\x10\x01\x49\x08\x75\x70\x47\x00\x00\xC2\x4E\x00\x10\x10\xB5\x0C\x46\x06\x49\x15\x20\x88\x47\x01\x28\x06\xD1\x60",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x02\xD1\x40\x1C\x10\x28\xF8\xDB\x10\x28\xF0\xD1\x55\x48\x06\x22\x08\x30\xFE\xF7\xF3\xFC\x27\x71\x01\x20\x20\x70\xFF\xF7\x48\xF8\xFE\xBD\x26\x70\xE6\x70\x01\x20\x60\x70\x26\xE0\x01\x2A\xCA\xD1\x28\x78\x00\x28\x05\xD0\xFF\xF7\xF7\xFC\x60",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xAD\x19\x38\x78\x01\x46\x09\x39\x8D\x42\xE6\xDB\xFE\xBD\x04\x2A\xFC\xD1\x05\x20\x60\x70\xFE\xF7\xD7\xFF\x2A\x79\x69\x1D\x00\x20\xFE\xF7\xAE\xFF\x00\x20\xFF\xF7\x13\xFE\x11\x4C\xA0\x42\x02\xD0\xFF\xF7\xA4\xFB\x01\xE0\xFF\xF7\x77\xFC\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xEF\x33\x00\x01\x5D\x2B\x00\x01\x70\xB5\x0C\x46\x89\x78\x1B\x29\x03\xD0\x21\x46\x0B\x4C\xA0\x47\x70\xBD\x0B\x49\x20\x88\x88\x47\x00\x28\x0C\xD0\x01\x89\x04\x23\x09\x4D\x0B\x22\x07\x48\xA8\x47\x21\x88\x01\x80\xE1\x78\x81\x70\x05\x49\x2E",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x48\x30\xFE\xF7\x7B\xFB\x2B\x49\x2C\x48\x48\x31\xC8\x61\x22\x48\x10\x38\x68\x60\x02\xF0\x1E\xF9\x02\xF0\x7E\xF8\x28\x48\xFE\xF7\xFB\xFC\x00\x01\x00\x0F\x27\x4D\x0F\x28\x06\xD1\x24\x48\x00\x1D\xFE\xF7\xF2\xFC\x00\x0F\x0F\x28\x1A\xD0\x23",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x5B\x1C\x93\x42\xF8\xDB\x93\x42\x01\xD1\x00\x20\x30\xBD\x01\x20\x30\xBD\x00\x00\x02\x49\x2E\x22\x49\x6B\x50\x43\x08\x18\x70\x47\xC0\xD1\x00\x10\x01\x70\x09\x0A\x41\x70\x70\x47\x70\xB5\x16\x4C\x00\x25\x25\x73\x65\x73\x15\x4D\x15\x4E\xA8",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x29\x46\x38\x46\x01\xF0\x1C\xFE\xF8\xBD\x00\x00\xCC\x46\x00\x10\x90\x00\x00\x40\x10\xB5\x08\x4C\x20\x79\x00\x28\x01\xD0\x00\x20\x10\xBD\x06\x48\x00\x6B\x00\x28\x02\xD0\x80\x47\x00\x28\xF7\xD0\x01\x20\x20\x71\x10\xBD\x00\x00\xC0\xF4\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x08\x38\xFE\xF7\x8D\xFB\xFF\x20\x03\x49\x01\x30\x08\x60\x70\xBD\xBC\x46\x00\x10\x10\x90\x00\x40\x00\xE1\x00\xE0\xFF\xB5\x0C\x46\x81\xB0\x05\x46\x0D\x49\x0A\x98\x08\x60\x0D\x49\xA0\x00\x0D\x4E\x09\x58\x1F\x46\x30\x46\xFF\xF7\xC3\xFF\x30",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xF8\xBD\x00\x00\x80\xD6\x00\x10\x89\x2D\x00\x01\x24\xD5\x00\x10\x95\x2B\x00\x01\xC0\xD2\x00\x10\x60\xE3\x00\x10\x0F\x29\x01\x01\xF8\xB5\x0C\x46\x07\x46\x12\x49\x1D\x46\x16\x46\x0C\x20\x88\x47\x07\x28\x15\xD1\x20\x88\xC1\x07\x0B\xD1\x81",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x2A\xD0\x11\x29\x28\xD0\x21\x46\x2B\x4C\x04\x9B\x03\x9A\x01\x98\xA0\x47\x05\xB0\xF0\xBD\x31\x02\x20\x23\x0B\x22\x27\x48\x09\x31\xA8\x47\x05\x46\x20\x88\x28\x80\x20\x7A\xA8\x77\x60\x88\x68\x80\x30\x46\xB8\x47\xC1\x1E\xE0\x88\x81\x42\x02",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x49\x1C\x11\x46\x04\xD0\x81\x43\x02\x48\xFE\xF7\x09\xFA\x10\xBD\x01\x43\xF9\xE7\x04\x00\x00\x50\x10\xB5\x08\x48\xFF\x21\x00\x78\x09\x02\x02\x02\x06\x48\xFE\xF7\xFF\xF9\x05\x48\x10\x38\xFE\xF7\xF3\xF9\xC0\x43\xC0\x07\xC0\x17\x40\x1C\x10",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xA0\x88\xB0\x80\x30\x46\xA2\x88\x29\x46\x08\x30\xFD\xF7\xF6\xFF\x06\x49\x30\x46\x2E\x31\x88\x47\x05\x49\xA0\x79\x88\x47\x00\x20\xF8\xBD\x02\x20\xF8\xBD\x00\x00\x01\x14\x00\x00\x5D\x33\x00\x01\x5D\x2B\x00\x01\x70\xB5\x0C\x46\x08\x88\x16",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x04\x20\x00\xE0\x02\x20\xFF\xF7\xF7\xFE\x10\xBD\xFF\xB5\x81\xB0\x0C\x46\x88\x79\xFF\xF7\x7E\xFC\x06\x46\xA1\x78\x08\x36\x00\x25\x33\x48\x02\x29\x0C\xD0\xA1\x88\xC2\x88\x89\x18\x89\xB2\xC1\x80\x82\x88\x8A\x42\x54\xD1\x06\x46\x00\x89\x04",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xD0\xD0\x00\x10\x33\x2C\x00\x01\xFF\xB5\x06\x46\x88\x78\x81\xB0\x1D\x46\x0C\x46\x80\x07\x14\xD1\x1D\x48\x2A\x22\x01\x6B\xA0\x68\x80\x88\x50\x43\x08\x18\x81\x79\x00\x1D\x06\x29\x09\xD1\x01\x79\x09\x29\x06\xD1\x00\x21\x41\x71\x06\x22\x16",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x01\x43\x21\x80\xA9\x05\x02\xD5\x21\x88\x01\x43\x21\x80\x38\x46\xF8\xBD\x00\x00\xD0\xDE\x00\x10\x6D\xE1\x00\x01\x89\x2D\x00\x01\x00\x01\x00\x00\xFF\xB5\x0C\x46\x08\x88\x50\x21\x48\x43\x3D\x49\x0C\x25\x47\x18\x3C\x48\x89\xB0\x1E\x46\x80",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x81\x81\xE1\x88\xC1\x81\x01\x7E\x41\x72\x81\x8A\x41\x81\xC1\x8A\x41\x82\x20\x89\x02\xA9\x40\x1C\xB8\x81\x20\x88\x90\x47\x00\x20\x9A\xE7\x00\x00\x94\xD2\x00\x10\x5F\x9D\x00\x01\x89\x2D\x00\x01\x6B\x52\x00\x01\x0B\x78\x00\x01\xFD\x56\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x3F\x67\x00\x01\xF7\xB5\x06\x46\xC0\x89\x50\x4A\x40\x00\x92\x7B\x81\xB2\x74\x88\x8D\x1A\xA9\x1E\x82\xB0\x8C\x42\x00\xDD\x8C\xB2\xF1\x8A\x6D\x1E\x49\x1C\x4B\x08\x6F\x08\x5B\x00\x7F\x00\x48\x4A\xBB\x42\x01\xDD\x15\x40\x01\xE0\x11\x40\x0D",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x48\x85\x60\x88\x88\x85\xA0\x88\xC8\x85\xA0\x79\x08\x86\x00\x98\x40\x1E\x88\x87\xC8\x87\x0D\x48\x6B\x02\x20\x38\x00\x79\xC0\x18\x88\x86\x0E\x49\x00\x20\x55\x18\xE8\x80\x20\x8A\x28\x80\x60\x8A\x68\x80\x05\x21\x20\x46\x0C\x4A\x10\x30\x90",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x80\x1E\x84\xB2\xE5\xE7\x00\x00\x3C\xD5\x00\x10\x33\x2C\x00\x01\xFF\xFF\x00\x00\x5F\x7B\x00\x01\xCF\x77\x00\x01\x7C\xB5\x06\x9C\x03\x25\x01\x95\x00\x94\xFF\xF7\xA1\xFF\x02\x49\x04\x46\x88\x47\x20\x46\x7C\xBD\x21\x7A\x00\x01\x10\xB5\x09",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x12\xD8\x40\x1C\x48\x43\xFD\xF7\x93\xFC\x00\x22\x2B\x4B\xFD\xF7\x27\xFC\x07\x46\x0A\x20\x68\x43\x00\x91\xFD\xF7\x9D\xFC\x3A\x46\x00\x9B\xFD\xF7\xA7\xFC\x01\xD2\x12\x26\x40\xE0\xFD\xF7\xD4\xFB\x05\x46\x23\x48\x23\x49\x00\x6B\x23\x4A\x41",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x01\x98\xA0\x47\x05\xB0\xF0\xBD\x12\x48\x85\x88\x12\x48\x80\x47\x01\x46\x14\x23\x12\x4F\x0C\x22\x10\x48\xB8\x47\x61\x78\x01\x70\x0F\x49\x2E\x31\x88\x47\x09\x4A\x00\x21\x30\x46\x30\x3A\x90\x47\x0C\x4C\x00\x2D\x05\xD0\x0B\x49\x0C\x20\x28",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x61\x63\xEE\xE7\x89\x2D\x00\x01\xD9\x94\x00\x01\x00\xB0\x00\x40\xFF\xB5\x0C\x46\x4D\x78\x21\x49\x81\xB0\x1F\x46\x00\x20\x88\x47\x1F\x4E\x01\x28\x03\xD1\x00\x2D\x01\xD0\x60\x70\x2D\xE0\x3B\x46\x21\x46\x03\x9A\x01\x98\xB0\x47\x2C\xE0\x20",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xFD\xF7\x53\xFA\xE1\x70\xA0\x78\x40\x1C\xA0\x70\x70\xBD\x00\x00\x40\xDC\x00\x10\xCC\x46\x00\x10\x0E\xB5\x00\x22\x08\x21\xD2\x43\x1F\x48\xFD\xF7\x01\xFC\x01\x20\xFE\xF7\xD4\xFF\x00\x24\x23\x46\x22\x46\x1C\x49\x20\x46\x00\x94\x00\xF0\x2A",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x01\x34\x84\x42\xEE\xDB\x41\xB0\xF0\xBD\x00\x00\xCF\x11\x00\x01\x38\xB5\x04\x46\x00\x20\x01\x46\x00\x90\x1F\x20\x00\x03\xFF\xF7\xD7\xFF\x05\x48\x04\x21\x43\x6B\x6A\x46\x00\x20\x98\x47\x01\x21\x20\x46\x00\xF0\x01\xFC\x38\xBD\x80\xD0\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x68\x46\xFD\xF7\x9F\xF9\x00\x28\x09\xD0\x00\x22\x00\x2C\x08\xD0\x00\x2A\x0C\xD1\x00\x21\x28\x46\x07\xE0\x01\x24\xE7\xE7\x01\x22\xF4\xE7\x00\x2A\x03\xD0\x29\x46\x00\x20\xFF\xF7\x51\xFF\x40\xB0\x70\xBD\x00\x00\xCF\x11\x00\x01\x4E\x56\x44",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x00\xF0\x94\xFC\x01\x20\x00\x07\x00\x68\x93\x49\x88\x42\x02\xD0\x92\x49\x00\x20\xC8\x63\x92\x48\x86\x42\x01\xD9\x42\x05\x00\xE0\x00\x22\x91\x48\x27\x46\x02\x43\x8A\x48\x8E\x49\x0C\x30\xFD\xF7\x7B\xFA\x8F\x4C\x8D\x49\x20\x78\x00\x28\x01",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x3A\x46\x00\x1F\xFD\xF7\x10\xFA\x69\x49\x20\x46\x0A\x46\x00\xF0\x0D\xFC\x05\x21\x09\x04\x0A\x46\x00\x20\xFE\xF7\xA7\xFE\x65\x49\x30\x20\x0A\x46\xFE\xF7\xA2\xFE\x00\x22\x63\x49\x4C\x20\xFE\xF7\x9D\xFE\x11\x22\x13\x21\x12\x03\x09\x03\x78",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x01\x20\x69\x46\x08\x82\x03\xAA\x04\xA9\x10\x20\xFD\xF7\x82\xFD\x00\x28\x02\xD0\x11\x20\x69\x46\x08\x73\x68\x46\x00\x7B\x3F\x21\x42\x04\x0C\x48\x49\x04\x08\x30\xFD\xF7\x7E\xF9\x0C\x48\x86\x42\x01\xD9\x01\x20\x00\xE0\x00\x20\x00\xF0\xA4",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x11\x34\x00\x10\xC0\xF4\x00\x10\x01\xFC\x7F\x00\x00\x20\x00\x40\x00\xB5\x02\x20\x00\xF0\xA8\xF9\x00\xBD\x00\x00\x10\xB5\xFE\xF7\xFB\xFE\x00\x28\xFB\xD1\x01\x24\xA4\x07\x04\x21\x00\x22\x04\x48\xFD\xF7\xFA\xF8\x21\x12\x20\x46\xFD\xF7\xF2",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x8F\xF8\x22\x46\x36\x49\x30\x46\xFE\xF7\xEE\xFB\xFF\x20\xF5\x30\xFE\xF7\xA4\xFC\x2E\x4A\x00\x21\x01\x20\xE0\x32\x90\x47\x2E\x48\x00\x1D\xFD\xF7\x79\xF8\x2B\x49\x02\x46\x48\x39\x30\x46\xFE\xF7\xDB\xFB\x00\x22\x2A\x49\x30\x46\xFE\xF7\xD6",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x4D\x56\x01\x01\x7D\x0D\x00\x01\x70\x47\x00\x00\xFF\xB5\x06\x46\x18\x46\x0B\x30\x1D\x46\x0F\x46\x83\xB2\x0F\x4C\x81\xB0\xB2\x88\x0B\x21\x0C\x48\xA0\x47\x04\x46\x30\x88\x20\x80\x00\x20\xA0\x80\x0A\x98\x20\x72\x67\x80\xE5\x80\x01\x20\x60",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x10\xBD\x00\x00\xCC\x46\x00\x10\xDC\xDD\x00\x10\x00\x02\x00\x00\x00\x01\x00\x00\x14\x21\x48\x43\x10\xB5\x06\x49\x01\x22\x09\x6B\x12\x05\xCB\x17\x00\x24\x8A\x18\x63\x41\x01\x0B\x00\x05\xFC\xF7\x3C\xFD\x10\xBD\xC0\xDB\x00\x10\xF8\xB5\x01",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x89\x2D\x00\x01\xFE\xB5\x0E\x78\xFF\x25\xE5\x35\x6E\x43\x2D\x4D\x0C\x46\x76\x19\xF6\x7D\x02\x2E\x03\xD0\x2B\x4C\xA0\x47\x00\x20\xFE\xBD\x61\x7C\x68\x46\x01\x71\x21\x7C\x41\x71\xE1\x7B\x81\x71\x20\x78\xFF\x21\xE5\x31\x48\x43\x24\x49\x40",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x01\x90\x01\x2E\x01\xD0\x02\x2E\x07\xD1\xA5\x7C\x67\x7C\x68\x07\x40\x0F\xA0\x74\x78\x07\x40\x0F\x60\x74\x11\x4C\x06\x9B\x05\x9A\x00\x99\x03\x98\xA0\x47\x0F\x48\x01\x2E\x02\xD0\x02\x2E\x08\xD0\x0E\xE0\xFF\x22\x01\x99\xE5\x32\x51\x43\x08",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x40\x46\x00\x10\x10\xB5\x40\x30\xFC\xF7\x06\xFE\x10\xBD\x10\xB5\x08\x30\xFC\xF7\x09\xFE\x10\xBD\x10\xB5\x08\x30\xFC\xF7\x04\xFE\x10\xBD\x10\xB5\x00\x1D\xFC\xF7\xFB\xFD\x10\xBD\x10\xB5\xA0\x30\xFC\xF7\xFA\xFD\x10\xBD\x10\xB5\x90\x30\xFC",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xF8\xB5\x0A\x46\x03\x00\x25\x4E\x25\x4F\x26\x49\x26\x48\x27\x4C\x27\x4D\x06\xD0\x01\x2B\x1A\xD0\x02\x2B\x1C\xD0\x03\x2B\x30\xD1\x1C\xE0\x01\x2A\x01\xD0\x82\x42\x01\xD1\x32\x46\x01\xE0\x21\x48\x00\x22\x38\x60\x1D\x48\xA8\x30\xFC\xF7\x76",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xAC\x42\x02\xD0\x11\x4D\xAC\x42\x08\xD1\x00\x28\x03\xDB\x0F\x21\x09\x02\x02\x02\x11\xE0\x01\x21\xC9\x02\x0D\xE0\x0C\x4D\xAC\x42\x02\xD0\x0C\x4D\xAC\x42\x08\xD1\x00\x28\x03\xDB\x0F\x21\x09\x03\x02\x03\x02\xE0\x01\x21\xC9\x03\x1A\x46\x01",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x58\xCF\x00\x10\xE4\x45\x00\x10\x2C\x70\x01\x01\x9C\x52\x00\x10\xD9\x22\x00\x10\x4C\x56\x00\x10\xF8\xB5\x36\x48\x30\x22\xF0\xC8\x35\x49\x36\x48\xFC\xF7\xEA\xFA\x34\x48\x35\x49\x41\x61\x35\x49\xC1\x62\x31\x49\x50\x22\x50\x39\x30\x30\xFC",length);
		ble::ble_send_test(sendData,1,length);

		length = 264;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xD5\x2B\x00\x10\xA1\x2C\x00\x10\x21\x20\x00\x10\xBC\x75\x01\x01\xEB\xF2\x00\x01\xC7\xED\x00\x01\xA5\x25\x00\x10\x2F\xF4\x00\x01\x13\xDE\x00\x01\xF5\xE3\x00\x01\x0D\xE5\x00\x01\xC7\xE2\x00\x01\x10\x30\x00\x00\x3D\xE0\x00\x01\xE1\xD7\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x43\x1A\x01\x01\x03\x14\x00\x00\x32\x2C\x00\x00\x4C\x56\x00\x10\x08\x47\x00\x10\x10\xB5\xFF\x22\x14\x4C\x29\x32\x14\x49\x15\x48\xFC\xF7\xEC\xF9\x12\x4B\x14\x4A\x10\x3B\x99\x68\x18\x68\xDB\x68\x53\x61\x11\x61\x90\x60\x0F\x48\x10\x49\x41",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x9D\x42\x01\xD1\x0C\x46\x01\xE0\xBD\x42\x02\xD0\x0A\x48\x85\x42\x00\xD1\x0C\x46\x11\x46\x28\x46\x00\xF0\xB8\xF8\x21\x46\x28\x46\x00\xF0\xB0\xF8\xF8\xBD\x00\x00\x00\x20\x00\x40\x00\x30\x00\x40\x00\x40\x00\x40\x02\x00\x00\x20\x00\x50\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xFF\xF7\x8F\xFC\x05\xE0\xBC\x42\x03\xD1\x01\x20\x80\x07\x01\x46\x04\xE0\x14\x49\x8C\x42\x03\xD1\xC9\x04\x48\x08\xFF\xF7\x81\xFC\x0E\x48\x84\x42\x06\xD1\x14\x20\xFC\xF7\xEE\xFB\x0F\x48\x08\x30\x60\xC0\x07\xE0\xBC\x42\x05\xD1\x15\x20\xFC",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x29\x46\x0C\x30\xFC\xF7\x0C\xFA\xFD\xF7\x5E\xFE\x00\x20\x30\x61\x70\x60\xF0\x60\x30\x60\x70\x61\xB0\x60\xF8\xBD\x44\x4F\x00\x10\x00\x70\x00\x40\x04\x00\x00\x40\x00\xA0\x00\x40\x84\x45\x00\x10\xA1\x08\x40\x00\x00\xE1\x00\xE0\x38\xB5\x09",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\x22\x46\x07\x49\x30\x46\xFF\xF7\x96\xFB\x70\xBD\x14\x46\xC2\x68\x19\x46\x0A\x43\xC2\x60\xE9\xE7\x7C\x46\x00\x10\x94\x00\x00\x40\x00\x04\x80\x00\xF8\xB5\x01\x26\x0C\x46\x05\x46\xF6\x05\x31\x46\x13\x48\xFC\xF7\x75\xF9\x14\x4F\x12\x49\x38",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xED\x13\x00\x10\x3D\x30\x00\x00\xED\x12\x00\x10\x3F\x30\x00\x00\xB5\x12\x00\x10\x46\x30\x00\x00\x11\x13\x00\x10\x3C\x30\x00\x00\x71\x13\x00\x10\x42\x30\x00\x00\xB9\x13\x00\x10\x2A\x30\x00\x00\x2D\x10\x00\x10\x36\x30\x00\x00\x9D\x10\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\x00\x01\x00\xBB\x15\x00\x10\x17\x2C\x00\x00\x01\x16\x00\x10\x18\x2C\x00\x00\xFD\x15\x00\x10\x19\x2C\x00\x00\x11\x14\x00\x10\x2B\x2C\x00\x00\xB7\x15\x00\x10\x1A\x2C\x00\x00\x9F\x15\x00\x10\x1B\x2C\x00\x00\x8D\x15\x00\x10\x1C\x2C\x00\x00\x89\x15\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 64;
		memcpy(sendData,"\x71\x45\xB0\x00\x00\x06\x00\x00\x00\xBC\x56\x00\x10\x0A\x00\x00\x00\x3C\x46\x00\x10\xE8\x47\x00\x10\x74\x00\x00\x00\x28\x0F\x00\x10\xE8\x47\x00\x10\x3C\x46\x00\x10\xAC\x01\x00\x00\xC2\x05\x00\x10\xB0\x46\x00\x10\xE8\x47\x00\x10\x50\x14\x00\x00\x38\x0F\x00",length);
		ble::ble_send_test(sendData,1,length);

		length = 7;
		memcpy(sendData,"\x71\x47\x00\x00\x00\xB1\x3F",length);
		ble::ble_send_test(sendData,1,length);

	 	length = 7;
		memcpy(sendData,"\x71\x4A\x00\x00\x00\x37\x06",length);
		ble::ble_send_test(sendData,1,length);

		ble::ble_get_version(sendData);
		*/

    } while (0);

    len_data = organize_data_region(data_to_send, &ret, (uint16_t)sizeof(sam_status), sam_status);

	g_Record.log_out(ret.wErrCode, level_disaster,
		"Common_Initialize_Device(station=%04X,type=%02X,device=%03X)=(%04X,%02X) version = (%s)",
		current_station_id, current_device_type, current_device_id, ret.wErrCode, ret.bNoticeCode,API_FILE_VERSION);
}

void Api::Common_GetSamInfo(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
    RETINFO ret			= {0};
	bool flags[8]		= {true, true, true, false, false, false, false, false};
	uint8_t dev_inf[5]	= {0};

	SAMSTATUS sst[8];

    memset(sst, 0, sizeof(sst));

	memset(Api::qr_readbuf,0x00,sizeof(Api::qr_readbuf));//交易结束，不管是否成功，再次清掉二维码

	ret.wErrCode = g_Parameter.device_initialized();
	if (ret.wErrCode == 0)
	{
		dev_inf[0] = (uint8_t)((current_station_id >> 8) & 0xFF);
		dev_inf[1] = (uint8_t)(current_station_id & 0xFF);
		dev_inf[2] = current_device_type;
		dev_inf[3] = (uint8_t)((current_device_id >> 8) & 0xFF);
		dev_inf[4] = (uint8_t)(current_device_id & 0xFF);

		for (int i=0;i<8;i++)
		{
			sst[i].bSAMStatus = 0xFF;
			if (i < 4 && sam_init(i, m_sam[i], m_tml[i]) == 0)
			{
				if (g_Parameter.sam_counterpart(i, m_sam[i], dev_inf, dev_inf[2], dev_inf + 3, flags[i]))
					sst[i].bSAMStatus = 0x00;
				else
					sst[i].bSAMStatus = 0x01;

				memcpy(sst[i].cSAMID, m_sam[i], sizeof(sst[i].cSAMID));
			}
			else
			{
				memset(sst[i].cSAMID, '0', sizeof(sst[i].cSAMID));
			}
		}
	}

    len_data = organize_data_region(data_to_send, &ret, sizeof(sst), sst, 0, NULL);
}

void Api::Common_GetVersion(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret			= {0};
	READERVERSION ver;

	memset(&ver, 0, sizeof(ver));

	memcpy(ver.verApi, API_VERSION, 2);
	memcpy(ver.verApiFile, "\x20\x21\x12\x24\x01", 5);//增加BOM的相关接口

	if (rf_version((unsigned char *)(&ver.verRfDev)) == 0)
		memcpy(ver.verRfFile, "\x20\x18\x06\x63\x22", 5);

	if (sam_version((unsigned char *)(&ver.verSamDev)) == 0)
		memcpy(ver.verSamFile, "\x20\x13\x07\x06\x01", 5);

	len_data = organize_data_region(data_to_send, &ret, sizeof(ver), &ver);
}

void Api::Common_SetDegradeMode(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
    RETINFO ret = {0};
	ret.wErrCode = g_Parameter.device_initialized();
	if (ret.wErrCode == 0)
	{
		g_Parameter.modify_degrade(param_stack[0], param_stack + 1, param_stack + 8, param_stack[10]);
	}

	len_data = organize_data_region(data_to_send, &ret);

	g_Record.log_out(ret.wErrCode, level_disaster,
		"Degrade mode info:type=%d,time=%02x%02x%02x%02x%02x%02x%02x,station=%02x%02x,flag=%d",
		param_stack[0], param_stack[1], param_stack[2], param_stack[3], param_stack[4], param_stack[5],
		param_stack[6], param_stack[7], param_stack[8],param_stack[9],param_stack[10]);
}

void Api::Common_SearchCard(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
    RETINFO ret = {0};
    len_data = organize_data_region(data_to_send, &ret);
}

void Api::GetFare(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
    RETINFO ret = {0};
    long fare_trade = 0;
    uint8_t ticket_type[2];
    uint16_t entry_station;

	ret.wErrCode = g_Parameter.device_initialized();
	if (ret.wErrCode == 0)
	{
		memcpy(&ticket_type, param_stack, 2);
		entry_station = (uint16_t)((param_stack[2] << 8) + param_stack[3]);

		ret.wErrCode = g_Parameter.query_fare(CmdSort::m_time_now, ticket_type, entry_station, CmdSort::m_time_now, &fare_trade);
	}

	len_data = organize_data_region(data_to_send, &ret, sizeof(fare_trade), &fare_trade);
}

void Api::Common_GetParamInfo(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret							= {0};
	char sz_prm_name[_POSIX_PATH_MAX]	= {0};

	//ret.wErrCode = g_Parameter.device_initialized();
	//if (ret.wErrCode == 0)
	{
		uint16_t prm_type = (uint16_t)((param_stack[0] << 8) + param_stack[1]);

		if((prm_type == 0x0001) || (prm_type == 0x0002)|| (prm_type == 0x0003)|| (prm_type == 0x0004)|| (prm_type == 0x0010)|| (prm_type == 0x0012)|| (prm_type == 0x1002))
			ret.wErrCode = g_Parameter.get_prm_info_itp(prm_type, sz_prm_name);
		else
			ret.wErrCode = g_Parameter.get_prm_info(prm_type, sz_prm_name);
	}

	len_data = organize_data_region(data_to_send, &ret, strlen(sz_prm_name), sz_prm_name);
}

void Api::Bom_FunActive1(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
    RETINFO ret         = {0};
    char sz_temp[32]    = {0};
    uint8_t free_num[8] = {0};
	SAM_ACTIVE sact;
	uint16_t len_act	= 0;

    memset(&sact, 0, sizeof(sact));

	ret.wErrCode = g_Parameter.device_initialized();
	if (ret.wErrCode == 0)
	{
		if (sam_metro_function_active(SAM_SOCK_1, 0, free_num) < 0)
		{
			ret.wErrCode = ERR_SAM_RESPOND;
		}
		else
		{
			len_act	= sizeof(SAM_ACTIVE);

			memcpy(sact.cMsgType, "55", 2);
			memcpy(sact.dtTime, CmdSort::m_time_now, 7);

			get_current_device_info(sact.cStation, sact.cDevType, sact.cDevId);
			memcpy(sact.cSamId, m_sam[0], 16);

			sprintf(sz_temp, "%02X%02X%02X%02X%02X%02X%02X%02X",
				free_num[0], free_num[1], free_num[2], free_num[3], free_num[4], free_num[5], free_num[6], free_num[7]);
			memcpy(sact.cFreedom, sz_temp, 16);
		}
	}

	len_data = organize_data_region(data_to_send, &ret, len_act, &sact, 0, NULL);

	g_Record.log_out(ret.wErrCode, level_invalid, "Bom_FunActive1()=(%04X,%02X)", ret.wErrCode, ret.bNoticeCode);

}

void Api::Bom_FunActive2(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret         = {0};
	uint8_t mac[8]		= {0};

	ret.wErrCode = g_Parameter.device_initialized();
	if (ret.wErrCode == 0)
	{
		Publics::string_to_hexs((char *)(param_stack + 38), 16, mac, 8);

		if (sam_metro_function_active(SAM_SOCK_1, 1, mac) < 0)
		{
			ret.wErrCode = ERR_SAM_RESPOND;
		}
	}

	len_data = organize_data_region(data_to_send, &ret, 0, NULL, 0, NULL);

	g_Record.log_out(ret.wErrCode, level_invalid, "Bom_FunActive2()=(%04X,%02X)", ret.wErrCode, ret.bNoticeCode);
}

void Api::Get_Reg_Value(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret         = {0};
	uint32_t reg_val	= 0;

	len_data = organize_data_region(data_to_send, &ret, 4, &reg_val, 0, NULL);
}

void Api::Get_Reg_Inf(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret				= {0};
	uint32_t reg_inf[256]	= {0};

	len_data = organize_data_region(data_to_send, &ret, 1024, reg_inf, 0, NULL);
}

void Api::Reset_Reg_Inf(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret         = {0};

	len_data = organize_data_region(data_to_send, &ret, 0, NULL, 0, NULL);
}

void Api::Common_LastTrade(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	len_data = organize_data_region(data_to_send, &m_tdLast.ret, m_tdLast.len_region1, m_tdLast.region1, m_tdLast.len_region2, m_tdLast.region2);
}

void Api::Temp_interface_1(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret					= {0};
	TicketBase * p_ticket		= NULL;
	TICKET_PARAM ticket_prm;

	do
	{
		ret.wErrCode = TicketBase::search_card(&p_ticket);
		if (ret.wErrCode != 0)	break;

		ret = p_ticket->read_card(operSale, ticket_prm);
		if (ret.wErrCode != 0)	break;

		ret = p_ticket->data_version_upgrade();

	}
	while (0);

	len_data = organize_data_region(data_to_send, &ret);
}

void Api::Get_Configurations(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret			= {0};
	LOCCONFIG loc_conf	= {0};

	g_Record.get_record_param(loc_conf.trade_save_days, loc_conf.log_save_days, loc_conf.log_level);

	len_data = organize_data_region(data_to_send, &ret, (uint16_t)(sizeof(loc_conf)), &loc_conf);
}

void Api::Set_Configurations(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret			= {0};
	LOCCONFIG loc_conf	= {0};

	memcpy(&loc_conf.trade_save_days, param_stack, 2);
	memcpy(&loc_conf.log_save_days, param_stack + 2, 2);
	memcpy(&loc_conf.log_level, param_stack + 4, 2);

	ret.wErrCode = g_Record.set_record_param(loc_conf.trade_save_days, loc_conf.log_save_days, loc_conf.log_level);

	len_data = organize_data_region(data_to_send, &ret);

}
void Api::App_Addr_invalid(bool valid_app_addr, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret			= {0};

	if (!valid_app_addr)
	{
		ret.wErrCode = ERR_APP_NOT_EXSIT;

		len_data = organize_data_region(data_to_send, &ret);
	}
}

void Api::Common_TimeSynchronization(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret = {0};
	uint8_t time_now[7] = {0};
	//uint8_t ticket_type[2];
	//uint16_t entry_station;

	memcpy(time_now, param_stack, 7);

	len_data = organize_data_region(data_to_send, &ret, 7, time_now);

	g_Record.log_out(ret.wErrCode, level_error,
		"Common_TimeSynchronization=(%02X%02X%02X%02X%02X%02X%02X)",time_now);
}


void Api::Common_GetReaderTime(uint8_t * param_stack, uint8_t * data_to_send, uint16_t& len_data)
{
	RETINFO ret = {0};
	uint8_t time_now[7] = {0};
	//uint8_t ticket_type[2];
	//uint16_t entry_station;

	memcpy(time_now, CmdSort::m_time_now, 7);

	len_data = organize_data_region(data_to_send, &ret, 7, time_now);

	g_Record.log_out(ret.wErrCode, level_error,
		"Common_GetReaderTime=(%02X%02X%02X%02X%02X%02X%02X)",time_now);
}



